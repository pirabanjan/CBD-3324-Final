Promote-container-prod:
  stage: Release-prod
  when: manual
  tags:
    - dostream
  services:
    - name: docker:dind
  image: docker:latest
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - VERSION_PROD=$(cat version.txt)-prod
    - export PROD_IMAGE_NAME="$CI_REGISTRY:$VERSION_PROD"
    - echo $PROD_IMAGE_NAME > my_variable_prod.txt
    - IMAGE_NAME=$(cat my_variable_stg.txt)
    - docker pull $IMAGE_NAME
    - docker tag $IMAGE_NAME $PROD_IMAGE_NAME
    - docker push $PROD_IMAGE_NAME
  needs:
    - job: Promote-container-stg
      artifacts: true
    - job: notification_email_stg
  artifacts:
    paths:
      - my_variable_prod.txt

generate_tag_prod:
  stage: Release-prod
  when: manual
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when the default branch changes
  script:
    - VERSION=$(cat version.txt)-prod
    - echo "TAG=$VERSION" > tag.env
  artifacts:
    reports:
      dotenv: tag.env
  needs:
    - job: Promote-container-prod

auto-release-master_prod:
  stage: Release-prod
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - job: generate_tag_prod
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed to the default branch
  script:
    - echo "Release $TAG"
    - release-cli --server-url https://gitlab.com --project-id 51551547 --private-token $CI_JOB_TOKEN create --name "Release $TAG" --description "Created using the release-cli $EXTRA_DESCRIPTION" --tag-name "V$TAG"  --ref $CI_COMMIT_SHA


#Deploying in Dev
Deploy-prod:
  stage: Prod-Deploy
  tags:
    - dostream
  when: manual
  script:
    - echo "Running stg deploy..."
    # Run your smoke tests here
  needs:
    - job: Promote-container-dev
      artifacts: true
    - job: auto-release-master_prod

unit-test_prod:
  stage: Tests-prod
  script:
    - echo "Running smoke tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-prod

Shadow-test_prod:
  stage: Tests-prod
  script:
    - echo "Running Shadow tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-prod

Integration-test_prod:
  stage: Tests-prod
  script:
    - echo "Running Integration tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-prod

Load-test_prod:
  stage: Tests-prod
  script:
    - echo "Running load tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-prod

End-user-test_prod:
  stage: Tests-prod
  script:
    - echo "Running end-user tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-prod


notification_email_prod:
  stage: Notification-prod
  script:
    - echo "Running notification send"
    # Run your smoke tests here
  # needs:
  #   - job: Deploy-Dev
#actual code below
# notification_email:
#   stage: Notify
#   image: alpine:latest
#   variables:
#     EMAIL_LIST: "recipient1@example.com recipient2@example.com recipient3@example.com"
#   script:
#     - apk add --no-cache mailx
#     - |
#       for email in $EMAIL_LIST; do
#         echo "Your pipeline has completed successfully!" | mailx -s "Pipeline Notification" "$email"
#       done
#   only:
#     - master
  needs:
    - job: unit-test_prod
    - job: Shadow-test_prod
    - job: Integration-test_prod
    - job: Load-test_prod
    - job: End-user-test_prod
