Promote-container-dev:
  stage: Release-dev
  tags:
    - dostream
  services:
    - name: docker:dind
  image: docker:latest
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - VERSION_DEV=$(cat version.txt)-dev
    - export DEV_IMAGE_NAME="$CI_REGISTRY:$VERSION_DEV"
    - echo $DEV_IMAGE_NAME > my_variable_dev.txt
    - IMAGE_NAME=$(cat my_variable.txt)
    - docker pull $IMAGE_NAME
    - docker tag $IMAGE_NAME $DEV_IMAGE_NAME
    - docker push $DEV_IMAGE_NAME
  needs:
    - job: build Image
  artifacts:
    paths:
      - my_variable_dev.txt
    

# Release for dev environment 
generate_tag_dev:
  stage: Release-dev
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when the default branch changes
  script:
    - VERSION=$(cat version.txt)-dev
    - echo "TAG=$VERSION" > tag.env
  artifacts:
    reports:
      dotenv: tag.env
  needs:
    - job: Promote-container-dev


auto-release-master_dev:
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - job: generate_tag_dev
      artifacts: true
  stage: Release-dev
  rules:
    - if: $CI_COMMIT_TAG
      when: never  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed to the default branch
  script:
    - echo "Release $TAG"
    - release-cli --server-url https://gitlab.com --project-id 51551547 --private-token $CI_JOB_TOKEN create --name "Release $TAG" --description "Created using the release-cli $EXTRA_DESCRIPTION" --tag-name "V$TAG"  --ref $CI_COMMIT_SHA

# create_secret:
#   stage: create_secret
#   script:
#     - echo "IMAGE_NAME=$(cat $my_variable.txt)" > my-secrets.txt
#     - kubectl create secret generic my-secrets --from-file=my-secrets.txt
#   dependencies:
#     - build Image
#   only:
#     - master  # Adjust this based on the branch where you want to create the secret


#Deploying in Dev
Deploy-Dev:
  stage: Dev-Deploy
  tags:
    - dostream
  when: manual
  before_script:
    - apk add --update --no-cache python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install awscli
    - apk add --no-cache curl
    - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl && mv kubectl /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION_PROD
    - apk add --no-cache docker
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - aws eks --region $AWS_DEFAULT_REGION_PROD update-kubeconfig --name dostream-eks
    - pwd
    - ls
    # - VERSION=$(cat my_variable_dev.txt)
    - VERSION_DEV=$(cat version.txt)-dev
    - export IMAGE_VERSION="$VERSION_DEV"
    - sed -i "s|\${IMAGE_VERSION}|$IMAGE_VERSION|" ./k8s/deployment.yaml
    - cat ./k8s/deployment.yaml
    - kubectl get secret regcred-shopping || kubectl create secret docker-registry regcred-shopping --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=unused@example.com
    - kubectl apply -f ./k8s/configmap.yaml
    - kubectl apply -f ./k8s/deployment.yaml
    - kubectl apply -f ./k8s/service.yaml
  needs:
    - job: Promote-container-dev
      artifacts: true
    - job: auto-release-master_dev

OWSAP Scan:       
  image: owasp/zap2docker-stable:2.12.0
  stage: DAST Scan
  allow_failure: true
  script:
    - echo "create a directory..."
    - mkdir /zap/wrk
    - echo "Execute the baseline scan..."
    - /zap/zap-baseline.py -t http://4swebdev.4sconsult.com/ -g gen.conf -r testreport.html
  after_script:
    - echo "Copy report file to the artifact path..."
    - cp /zap/wrk/testreport.html .
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - testreport.html
  needs:
    - job: Deploy-Dev



unit-test_dev:
  stage: Tests-dev
  script:
    - echo "Running smoke tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-Dev

Shadow-test_dev:
  stage: Tests-dev
  script:
    - echo "Running Shadow tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-Dev

Integration-test_dev:
  stage: Tests-dev
  script:
    - echo "Running Integration tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-Dev

Load-test_dev:
  stage: Tests-dev
  script:
    - echo "Running load tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-Dev

End-user-test_dev:
  stage: Tests-dev
  script:
    - echo "Running end-user tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-Dev


notification_email_dev:
  stage: Notification-dev
  script:
    - echo "Running notification send"
    # Run your smoke tests here
  # needs:
  #   - job: Deploy-Dev
#actual code below
# notification_email:
#   stage: Notify
#   image: alpine:latest
#   variables:
#     EMAIL_LIST: "recipient1@example.com recipient2@example.com recipient3@example.com"
#   script:
#     - apk add --no-cache mailx
#     - |
#       for email in $EMAIL_LIST; do
#         echo "Your pipeline has completed successfully!" | mailx -s "Pipeline Notification" "$email"
#       done
#   only:
#     - master
  needs:
    - job: unit-test_dev
    - job: Shadow-test_dev
    - job: Integration-test_dev
    - job: Load-test_dev
    - job: End-user-test_dev
    - job: OWSAP Scan
