# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
# include:
#   - local: './dev.yml'

stages:
  - Release-stg
  - Stg-Deploy
  - Tests-stg
  - Notification-stg

# include:
#   - local: 'dev.yml'

Promote-container-stg:
  stage: Release-stg
  tags:
      - dostream
  script:
    - VERSION=$(cat version.txt)
    - PROD_IMAGE_NAME="$CI_REGISTRY:$CI_COMMIT_REF_NAME-$VERSION-prod"
    - echo $PROD_IMAGE_NAME > prod_variable.txt
    - docker pull $IMAGE_NAME
    - docker tag $IMAGE_NAME $PROD_IMAGE_NAME
    - docker push $PROD_IMAGE_NAME
  needs:
    - job: notification_email_dev

# Release for dev environment 
generate_tag_stg:
  stage: Release-stg
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when the default branch changes
  script:
    - echo "TAG=$(cat VERSION)" > tag.env
  artifacts:
    reports:
      dotenv: tag.env
  needs:
    - job: Promote-container-stg

auto-release-master_stg:
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - job: generate_tag_stg
      artifacts: true
  stage: Release-stg
  rules:
    - if: $CI_COMMIT_TAG
      when: never  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed to the default branch
  script:
    - echo "Release $TAG"
    #- release-cli --server-url https://gitlab.com --project-id 51551545 --private-token glpat-znYoSk7-gy1nzypUUL8Q create --name "Release $TAG DEV" --description "Created using the release-cli $EXTRA_DESCRIPTION" --tag-name "V$TAG DEV"  --ref $CI_COMMIT_SHA
    - release-cli --server-url https://gitlab.com --project-id 51551545 --private-token $CI_JOB_TOKEN create --name "Release $TAG" --description "Created using the release-cli $EXTRA_DESCRIPTION" --tag-name "V$TAG"  --ref $CI_COMMIT_SHA


#Deploying in Dev
Deploy-stg:
  stage: Stg-Deploy
  tags:
    - dostream
  when: manual
  before_script:
    - apt-get install openssh-client
    - eval $(ssh-agent -s)
    - echo -n "$SSH_PRIVATE_KEY_INTERNAL_DEV" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${SSH_HOST_DEV} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${SSH_USER_DEV}@${SSH_HOST_DEV} "echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}"
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} 'docker pull nexus.corp.4sconsult.com/Buy-it-customer-service:latest'
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} 'docker stop Buy-it-customer-service || true'
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} 'docker rm Buy-it-customer-service || true'
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} "echo \"$DEV_SSL_KEY\" > /home/web-git/cert.key"
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} "echo \"$DEV_SSL_CRT\" > /home/web-git/cert.crt"
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} 'docker run -d -p 443:443 --name Buy-it-customer-service -v /home/web-git/cert.crt:/etc/ssl/certs/cert.crt -v /home/web-git/cert.key:/etc/ssl/private/cert.key nexus.corp.4sconsult.com/Buy-it-customer-service:latest'
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} 'docker exec Buy-it-customer-service mv /var/www/html/4sweb/config/config_dev.php /var/www/html/4sweb/config/config.php'
    - ssh -o StrictHostKeyChecking=no ${SSH_USER_DEV}@${SSH_HOST_DEV} 'docker image prune -f'
  needs:
    - job: auto-release-master_stg
  # dependencies:
  #   - Release-stg

unit-test_stg:
  stage: Tests-stg
  script:
    - echo "Running smoke tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-stg

Shadow-test_stg:
  stage: Tests-stg
  script:
    - echo "Running Shadow tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-stg

Integration-test_stg:
  stage: Tests-stg
  script:
    - echo "Running Integration tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-stg

Load-test_stg:
  stage: Tests-stg
  script:
    - echo "Running load tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-stg

End-user-test_stg:
  stage: Tests-stg
  script:
    - echo "Running end-user tests..."
    # Run your smoke tests here
  needs:
    - job: Deploy-stg


notification_email_stg:
  stage: Notification-stg
  script:
    - echo "Running notification send"
    # Run your smoke tests here
  # needs:
  #   - job: Deploy-Dev
#actual code below
# notification_email:
#   stage: Notify
#   image: alpine:latest
#   variables:
#     EMAIL_LIST: "recipient1@example.com recipient2@example.com recipient3@example.com"
#   script:
#     - apk add --no-cache mailx
#     - |
#       for email in $EMAIL_LIST; do
#         echo "Your pipeline has completed successfully!" | mailx -s "Pipeline Notification" "$email"
#       done
#   only:
#     - master
  needs:
    - job: unit-test_stg
    - job: Shadow-test_stg
    - job: Integration-test_stg
    - job: Load-test_stg
    - job: End-user-test_stg